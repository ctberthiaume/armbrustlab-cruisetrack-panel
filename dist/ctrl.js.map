{"version":3,"sources":["../src/ctrl.js"],"names":["MetricsPanelCtrl","_","$","TimeSeries","mapRenderer","panelDefaults","mapCenterLatitude","mapCenterLongitude","initialZoom","tileServerUrl","tileServerAttribution","tileServerSubdomains","CruiseTrackPanelCtrl","$scope","$injector","defaults","panel","series","mapdata","debouncedChange","debounce","map","remove","undefined","render","events","on","onDataReceived","bind","onDataError","onInitEditMode","addEditorTab","err","dataList","seriesHandler","lats","lons","forEach","s","alias","datapoints","length","lat","i","push","lon","time","seriesData","serie","target","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport TimeSeries from 'app/core/time_series2';\nimport mapRenderer from './map_renderer';\n\nconst panelDefaults = {\n  mapCenterLatitude: 0,\n  mapCenterLongitude: 0,\n  initialZoom: 1,\n  tileServerUrl: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png',\n  tileServerAttribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>',\n  tileServerSubdomains: 'abcd'\n};\n\nexport class CruiseTrackPanelCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n    this.series = [];\n    this.mapdata = [];\n    this.debouncedChange = _.debounce(() => {\n      if (this.map) {\n        // erase map\n        this.map.remove();\n        this.map = undefined;\n      }\n      this.render();\n    }, 3000);\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/armbrustlab-cruisetrack-panel/edit.html', 2);\n  }\n\n  editChanged() {\n    this.debouncedChange();\n  }\n\n  onDataError(err) {\n    this.onDataReceived([]);\n  }\n\n  onDataReceived(dataList) {\n    //console.log('map onDataReceived()');\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    let lats = [], lons = [], mapdata = [];\n    this.series.forEach(s => {\n      if (s.alias === 'lat' || s.alias === 'latitude') {\n        lats = s.datapoints;\n      } else if (s.alias === 'lon' || s.alias === 'longitude') {\n        lons = s.datapoints;\n      }\n    });\n    if (lats.length && lats.length === lons.length) {\n      lats.forEach((lat, i) => {\n        mapdata.push({\n          lat: lat[0],\n          lon: lons[i][0],\n          time: lat[1]\n        });\n      });\n      this.mapdata = mapdata;\n    }\n    this.render();\n  }\n\n  seriesHandler(seriesData) {\n    const serie = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n    return serie;\n  }\n\n  /* eslint class-methods-use-this: 0 */\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n}\n\nCruiseTrackPanelCtrl.templateUrl = 'template.html';\n"]}